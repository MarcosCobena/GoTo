//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoTo.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GoToParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ID=13, LETTER=14, WORD=15, DIGIT=16, NEWLINE=17, 
		WHITESPACE=18;
	public const int
		RULE_program = 0, RULE_macroDefinition = 1, RULE_macro = 2, RULE_macroName = 3, 
		RULE_macroParams = 4, RULE_macroBody = 5, RULE_line = 6, RULE_instruction = 7, 
		RULE_expression = 8;
	public static readonly string[] ruleNames = {
		"program", "macroDefinition", "macro", "macroName", "macroParams", "macroBody", 
		"line", "instruction", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'MACRO'", "'END'", "'GOTO'", "'['", "']'", "'='", "'IF'", "'!='", 
		"'0'", "'+'", "'-'", "'1'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ID", "LETTER", "WORD", "DIGIT", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoTo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GoToParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoToParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoToParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GoToParser.Eof, 0); }
		public MacroDefinitionContext[] macroDefinition() {
			return GetRuleContexts<MacroDefinitionContext>();
		}
		public MacroDefinitionContext macroDefinition(int i) {
			return GetRuleContext<MacroDefinitionContext>(i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 18; macroDefinition();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << ID) | (1L << WORD))) != 0)) {
				{
				{
				State = 24; line();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 30; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroDefinitionContext : ParserRuleContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MacroBodyContext macroBody() {
			return GetRuleContext<MacroBodyContext>(0);
		}
		public MacroDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterMacroDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitMacroDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroDefinitionContext macroDefinition() {
		MacroDefinitionContext _localctx = new MacroDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_macroDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__0);
			State = 33; macro();
			State = 34; macroBody();
			State = 35; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public MacroNameContext macroName() {
			return GetRuleContext<MacroNameContext>(0);
		}
		public MacroParamsContext macroParams() {
			return GetRuleContext<MacroParamsContext>(0);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 4, RULE_macro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; macroName();
			State = 38; macroParams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroNameContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(GoToParser.WORD, 0); }
		public MacroNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroNameContext macroName() {
		MacroNameContext _localctx = new MacroNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_macroName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroParamsContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(GoToParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GoToParser.ID, i);
		}
		public MacroParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterMacroParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitMacroParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroParamsContext macroParams() {
		MacroParamsContext _localctx = new MacroParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_macroParams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 42; Match(ID);
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroBodyContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public MacroBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterMacroBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitMacroBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroBodyContext macroBody() {
		MacroBodyContext _localctx = new MacroBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_macroBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 48; line();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << ID) | (1L << WORD))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	 
		public LineContext() { }
		public virtual void CopyFrom(LineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnlabeledLineContext : LineContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public UnlabeledLineContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterUnlabeledLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitUnlabeledLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabeledLine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabeledLineContext : LineContext {
		public IToken label;
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ITerminalNode ID() { return GetToken(GoToParser.ID, 0); }
		public LabeledLineContext(LineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterLabeledLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitLabeledLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 12, RULE_line);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__6:
			case ID:
			case WORD:
				_localctx = new UnlabeledLineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; instruction();
				}
				break;
			case T__3:
				_localctx = new LabeledLineContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(T__3);
				State = 55; ((LabeledLineContext)_localctx).label = Match(ID);
				State = 56; Match(T__4);
				State = 57; instruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionInstructionContext : InstructionContext {
		public ITerminalNode ID() { return GetToken(GoToParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionInstructionContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterExpressionInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitExpressionInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MacroInstructionContext : InstructionContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MacroInstructionContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterMacroInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitMacroInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalInstructionContext : InstructionContext {
		public IToken var;
		public IToken label;
		public ITerminalNode[] ID() { return GetTokens(GoToParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GoToParser.ID, i);
		}
		public ConditionalInstructionContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterConditionalInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitConditionalInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 14, RULE_instruction);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new ExpressionInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; Match(ID);
				State = 61; Match(T__5);
				State = 62; expression();
				}
				break;
			case T__6:
				_localctx = new ConditionalInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; Match(T__6);
				State = 64; ((ConditionalInstructionContext)_localctx).var = Match(ID);
				State = 65; Match(T__7);
				State = 66; Match(T__8);
				State = 67; Match(T__2);
				State = 68; ((ConditionalInstructionContext)_localctx).label = Match(ID);
				}
				break;
			case T__2:
			case WORD:
				_localctx = new MacroInstructionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; macro();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public IToken var;
		public IToken @operator;
		public ITerminalNode ID() { return GetToken(GoToParser.ID, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken var;
		public ITerminalNode ID() { return GetToken(GoToParser.ID, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGoToListener typedListener = listener as IGoToListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoToVisitor<TResult> typedVisitor = visitor as IGoToVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new BinaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; ((BinaryExpressionContext)_localctx).var = Match(ID);
				State = 73;
				((BinaryExpressionContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__10) ) {
					((BinaryExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 74; Match(T__11);
				}
				break;
			case 2:
				_localctx = new UnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; ((UnaryExpressionContext)_localctx).var = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', 'Q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\a', 
		'\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x1C', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x1F', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\a', '\x6', 
		'.', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x31', '\v', '\x6', '\x3', 
		'\a', '\x6', '\a', '\x34', '\n', '\a', '\r', '\a', '\xE', '\a', '\x35', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '=', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', 'I', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', 'O', '\n', '\n', '\x3', '\n', '\x2', '\x2', 
		'\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', 
		'\x4', '\x4', '\x2', '\x5', '\x5', '\x11', '\x11', '\x3', '\x2', '\f', 
		'\r', '\x2', 'O', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', '\x2', '\x2', '\x2', '\b', 
		'*', '\x3', '\x2', '\x2', '\x2', '\n', '/', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE', '<', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'H', '\x3', '\x2', '\x2', '\x2', '\x12', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', '\x15', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\xE', '\b', '\x2', 
		'\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\x2', '\x2', '\x3', 
		'!', '\x3', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x3', '\x2', 
		'\x2', '#', '$', '\x5', '\x6', '\x4', '\x2', '$', '%', '\x5', '\f', '\a', 
		'\x2', '%', '&', '\a', '\x4', '\x2', '\x2', '&', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x5', '\b', '\x5', '\x2', '(', ')', '\x5', '\n', 
		'\x6', '\x2', ')', '\a', '\x3', '\x2', '\x2', '\x2', '*', '+', '\t', '\x2', 
		'\x2', '\x2', '+', '\t', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\xF', 
		'\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', '\xE', 
		'\b', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '=', '\x5', '\x10', '\t', '\x2', '\x38', '\x39', 
		'\a', '\x6', '\x2', '\x2', '\x39', ':', '\a', '\xF', '\x2', '\x2', ':', 
		';', '\a', '\a', '\x2', '\x2', ';', '=', '\x5', '\x10', '\t', '\x2', '<', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '=', '\xF', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\xF', 
		'\x2', '\x2', '?', '@', '\a', '\b', '\x2', '\x2', '@', 'I', '\x5', '\x12', 
		'\n', '\x2', '\x41', '\x42', '\a', '\t', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\xF', '\x2', '\x2', '\x43', '\x44', '\a', '\n', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\v', '\x2', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', 
		'\x2', '\x46', 'I', '\a', '\xF', '\x2', '\x2', 'G', 'I', '\x5', '\x6', 
		'\x4', '\x2', 'H', '>', '\x3', '\x2', '\x2', '\x2', 'H', '\x41', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\xF', '\x2', '\x2', 'K', 
		'L', '\t', '\x3', '\x2', '\x2', 'L', 'O', '\a', '\xE', '\x2', '\x2', 'M', 
		'O', '\a', '\xF', '\x2', '\x2', 'N', 'J', '\x3', '\x2', '\x2', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x17', '\x1D', '/', '\x35', '<', 'H', 'N',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
